@using AppDomain.Requests
@model WebAPI.Models.PlanFormViewModel

@{
    var todayDate = DateTime.Now.ToString("yyyy-MM-dd");
    ViewBag.Title = "Create A Plan";
    Layout = "_Layout";
}

<h2 class="text-center display-6">
    <strong>@ViewBag.Title</strong>
</h2>

<div class="pt-5">
    @using (Html.BeginForm("Index", "Plan",
        null, FormMethod.Post, true, null))
    {
        <div class="row">
            <div class="col-8">
                <div class="form-group form-inline">
                    <input type="text" class="w-100 form-control form-control-lg" id="main-1"
                           name="@Html.DisplayNameFor(m => m.Title)" placeholder="A title for your plan">
                </div>

                <div class="form-group form-inline ">
                    <textarea rows="3" class="w-100 form-control form-control-lg" id="main-2" name="@Html.DisplayNameFor(m => m.Description)" placeholder="What is your plan about"></textarea>
                </div>
            </div>
        </div>

        <div id="dynamic-chores-list">
            <button class="form-control btn chore-form-btn btn-add-chore w-auto bg-light"><i class="fas fa-plus mr-3"></i>add chore</button>
        </div>

        <div class="col text-center push-to-bottom">
            <input type="submit" id="main-submit" class="w-25 form-control btn btn-primary btn-lg" value="Create">
        </div>
    }
</div>




@* ====== Templates ====== *@

@*template: Chore*@
<template id="chore-template">
    <div class="add-chores-form pb-1 px-5 pt-1 form-group">
        <div class="row">
            <button class="form-control btn chore-form-btn btn-remove-chore w-auto ml-auto m-3">
                <i class="icon-rm-chore fas fa-times"></i>
            </button>
        </div>
        <div class="form-group form-row justify-content-between align-top">
            <input type="text" class="form-control chore-title col-5" name="Chores[0].Title" placeholder="Title / what to do"/>
            <textarea rows="2" class="form-control chore-description col-6" name="Chores[0].Description" placeholder="Detailed description"></textarea>
        </div>

        <div class="add-user-form row form-group">
            <div class="form-inline add-user-group user-form-group mt-2">
                <input class="form-control add-user-input w-100" placeholder="add user..."/>
            </div>
        </div>

        <div class="add-interval-from form-group form-inline">
            <select class="interval-type-selector form-control mr-3" data-last-value="Duration Interval" name="IntervalType">
                @foreach (var fName in IntervalService.GetIntervalFriendlyNames())
                {
                    <option class="interval-option" value="@fName"
                            @{ fName == "Duration Interval" ? "selected" : ""}>
                        @fName</option>
                }
            </select>
            <div class="interval-parameter-form form-inline">
                <label class="form-label mr-3">
                    Starting Day: <input type="date" class="form-control chore-startdate ml-2" name="Chores[0].StartDay" value="@todayDate"/>
                </label>
                <input type="text" class="form-control chore-duration" name="Chores[0].Duration" placeholder="Duration in days" pattern="[1-9]\d*"/>
            </div>
        </div>
    </div>
</template>

@*template: Intervals:: Duration-Interval*@
<template id="Duration-Interval">
    <div class="interval-parameter-form">
        <label class="form-label mr-3">
            Starting Day: <input type="date" class="form-control chore-startdate ml-2" name="Chores[0].StartDay" value="@todayDate"/>
        </label>
        <input type="text" class="form-control chore-duration" name="Chores[0].Duration" placeholder="Duration in days" pattern="[1-9]\d*"/>
    </div>
</template>

@*template: Intervals:: Week-Interval*@
<template id="Week-Interval">
    <div class="interval-parameter-form">
        <label class="form-label mr-3">
            Select starting week with any date within that week: <input type="date" class="form-control chore-startdate ml-2" name="Chores[0].StartDay" value="@todayDate"/>
        </label>
        <input type="text" class="form-control chore-duration" name="Chores[0].Duration" placeholder="Duration in weeks" pattern="[1-9]\d*"/>
    </div>
</template>

@*template: Intervals:: Month-Interval*@
<template id="Month-Interval">
    <div class="interval-parameter-form">
        <label class="form-label mr-3">
            Select starting month with any date within that month: <input type="date" class="form-control chore-startdate ml-2" name="Chores[0].StartDay" value="@todayDate"/>
        </label>
        <input type="text" class="form-control chore-duration" name="Chores[0].Duration" placeholder="Duration in months" pattern="[1-9]\d*"/>
    </div>
</template>

@*template: Add User*@
<template id="user-template">
    <div class="form-inline user-form-group mr-3 mt-2 pl-2 bg-light">
        <input class="form-control normal-user-input p-0 bg-light"/>
        <button class="form-control btn chore-form-btn btn-remove-user bg-light">
            <i class="fas fa-times"></i>
        </button>
    </div>
</template>





@* ====== jQuery ====== *@

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function() {

            function suppressEnter(e) {
                if (e.keyCode == 13) {
                    e.preventDefault();
                    return false;
                }
            }

            // Prepare the User-Edit-Template
            const addChoreTemplate = $($('#chore-template').html());
            const addUserTemplate = $($('#user-template').html());
            [$("form"), addChoreTemplate, addUserTemplate].forEach(item => item.keypress(suppressEnter));


            // Add CHORES form
            $(".btn-add-chore").click(e => {
                e.preventDefault();
                var dynamicClone = addChoreTemplate.clone(true);
                dynamicClone.insertBefore('.btn-add-chore');
            });
            // add a first chore-form:
            const firstChoreClone = addChoreTemplate.clone(true);
            firstChoreClone.insertBefore('.btn-add-chore');


            // Remove CHORES from
            $("#dynamic-chores-list").on('click',
                '.btn-remove-chore',
                function(e) {
                    e.preventDefault();
                    $(this).closest('.add-chores-form').remove();
                    return false;
                });


            // Add USER Action
            $("#dynamic-chores-list").on('keyup.add-user-input',
                function(e) {
                    if (e.keyCode != 13)
                        return;
                    e.preventDefault();
                    const userAdderInput = $(e.target);
                    const userName = userAdderInput.val().trim();
                    if (userName === "")
                        return;

                    const dynamicClone = addUserTemplate.clone(true);
                    const cloneUserInput = $(dynamicClone.children()[0]);

                    cloneUserInput.val(userName);
                    cloneUserInput.attr('size', userName.length);
                    userAdderInput.val("");

                    dynamicClone.insertBefore($(e.target).closest('.add-user-group'));
                });

            // Remove USER Action
            $('#dynamic-chores-list').on('click',
                '.btn-remove-user',
                function(e) {
                    e.preventDefault();
                    $(e.target).closest('.user-form-group').remove();
                    return false;
                });


            // INDEX and Data-Mapping of all Chore fields
            $('form').submit(function(e) {
                $('.add-user-input').prop("disabled", true);

                $('.add-chores-form').each(function(choreIdx, elem) {

                    $(elem).find('.chore-title').attr('name', `Chores[${choreIdx}].Title`);

                    $(elem).find('.chore-description').attr('name', `Chores[${choreIdx}].Description`);
                    
                    $(elem).find('.interval-type-selector').attr('name', `Chores[${choreIdx}].IntervalType`);

                    $(elem).find('.chore-startdate').attr('name', `Chores[${choreIdx}].StartDay`);

                    $(elem).find('.chore-duration').attr('name', `Chores[${choreIdx}].Duration`);

                    $(elem).find('.normal-user-input').each(function(index) {
                        $(this).attr('name', `Chores[${choreIdx}].AssignedUsers[${index}]`);
                    });
                });
            });


            $('#dynamic-chores-list').on('click',
                '.interval-type-selector',
                function(e) {
                    // dont do anything unless selection changed
                    const self = $(this);
                    const lastVal = self.attr('data-last-value');
                    const currVal = self.val();
                    if (lastVal === currVal) {
                        return;
                    }
                    self.attr('data-last-value', currVal);
                    
                    // remove current form
                    self.next().remove();
                    
                    // add the correct template
                    const newTemplate = $($('template#' + currVal.replace(" ", "-")).html());
                    newTemplate.insertAfter(self);
                });
        });
    </script>
}